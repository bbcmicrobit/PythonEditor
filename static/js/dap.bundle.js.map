{"version":3,"names":[],"mappings":"","sources":["dap.bundle.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.DAPjs = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar proxy_1 = require(\"../proxy\");\nvar cmsis_dap_1 = require(\"../proxy/cmsis-dap\");\n/**\n * Arm Debug Interface class\n */\nvar ADI = /** @class */ (function () {\n    function ADI(transportOrDap, mode, clockFrequency) {\n        if (mode === void 0) { mode = 0 /* DEFAULT */; }\n        if (clockFrequency === void 0) { clockFrequency = cmsis_dap_1.DEFAULT_CLOCK_FREQUENCY; }\n        function isTransport(test) {\n            return test.open !== undefined;\n        }\n        this.proxy = isTransport(transportOrDap) ? new proxy_1.CmsisDAP(transportOrDap, mode, clockFrequency) : transportOrDap;\n    }\n    ADI.prototype.delay = function (timeout) {\n        return new Promise(function (resolve, _reject) {\n            setTimeout(resolve, timeout);\n        });\n    };\n    /**\n     * Continually run a function until it returns true\n     * @param fn The function to run\n     * @param timer The milliseconds to wait between each run\n     * @param timeout Optional timeout to wait before giving up and rejecting\n     * @returns Promise\n     */\n    ADI.prototype.waitDelay = function (fn, timer, timeout) {\n        var _this = this;\n        if (timer === void 0) { timer = 100; }\n        if (timeout === void 0) { timeout = 0; }\n        var running = true;\n        var chain = function (condition) {\n            if (!running)\n                return Promise.resolve();\n            return condition\n                ? Promise.resolve()\n                : _this.delay(timer)\n                    .then(fn)\n                    .then(chain);\n        };\n        return new Promise(function (resolve, reject) {\n            if (timeout > 0) {\n                setTimeout(function () {\n                    running = false;\n                    reject(\"Wait timed out\");\n                }, timeout);\n            }\n            return chain(false)\n                .then(function () { return resolve(); });\n        });\n    };\n    ADI.prototype.concatTypedArray = function (arrays) {\n        // Only one array exists\n        if (arrays.length === 1)\n            return arrays[0];\n        // Determine array length\n        var length = 0;\n        for (var _i = 0, arrays_1 = arrays; _i < arrays_1.length; _i++) {\n            var array = arrays_1[_i];\n            length += array.length;\n        }\n        // Concat the arrays\n        var result = new Uint32Array(length);\n        for (var i = 0, j = 0; i < arrays.length; i++) {\n            result.set(arrays[i], j);\n            j += arrays[i].length;\n        }\n        return result;\n    };\n    ADI.prototype.readDPCommand = function (register) {\n        return [{\n                mode: 2 /* READ */,\n                port: 0 /* DEBUG */,\n                register: register\n            }];\n    };\n    ADI.prototype.writeDPCommand = function (register, value) {\n        if (register === 8 /* SELECT */) {\n            if (value === this.selectedAddress) {\n                return [];\n            }\n            this.selectedAddress = value;\n        }\n        return [{\n                mode: 0 /* WRITE */,\n                port: 0 /* DEBUG */,\n                register: register,\n                value: value\n            }];\n    };\n    ADI.prototype.readAPCommand = function (register) {\n        var address = (register & 4278190080 /* APSEL */) | (register & 240 /* APBANKSEL */);\n        return this.writeDPCommand(8 /* SELECT */, address).concat({\n            mode: 2 /* READ */,\n            port: 1 /* ACCESS */,\n            register: register\n        });\n    };\n    ADI.prototype.writeAPCommand = function (register, value) {\n        if (register === 0 /* CSW */) {\n            if (value === this.cswValue) {\n                return [];\n            }\n            this.cswValue = value;\n        }\n        var address = (register & 4278190080 /* APSEL */) | (register & 240 /* APBANKSEL */);\n        return this.writeDPCommand(8 /* SELECT */, address).concat({\n            mode: 0 /* WRITE */,\n            port: 1 /* ACCESS */,\n            register: register,\n            value: value\n        });\n    };\n    ADI.prototype.readMem16Command = function (register) {\n        return this.writeAPCommand(0 /* CSW */, 587202640 /* VALUE */ | 1 /* SIZE_16 */)\n            .concat(this.writeAPCommand(4 /* TAR */, register))\n            .concat(this.readAPCommand(12 /* DRW */));\n    };\n    ADI.prototype.writeMem16Command = function (register, value) {\n        return this.writeAPCommand(0 /* CSW */, 587202640 /* VALUE */ | 1 /* SIZE_16 */)\n            .concat(this.writeAPCommand(4 /* TAR */, register))\n            .concat(this.writeAPCommand(12 /* DRW */, value));\n    };\n    ADI.prototype.readMem32Command = function (register) {\n        return this.writeAPCommand(0 /* CSW */, 587202640 /* VALUE */ | 2 /* SIZE_32 */)\n            .concat(this.writeAPCommand(4 /* TAR */, register))\n            .concat(this.readAPCommand(12 /* DRW */));\n    };\n    ADI.prototype.writeMem32Command = function (register, value) {\n        return this.writeAPCommand(0 /* CSW */, 587202640 /* VALUE */ | 2 /* SIZE_32 */)\n            .concat(this.writeAPCommand(4 /* TAR */, register))\n            .concat(this.writeAPCommand(12 /* DRW */, value));\n    };\n    ADI.prototype.transferSequence = function (operations) {\n        var _this = this;\n        // Flatten operations into single array\n        var merged = [];\n        merged = merged.concat.apply(merged, operations);\n        var chain = Promise.resolve([]);\n        var _loop_1 = function () {\n            var sequence = merged.splice(0, this_1.proxy.operationCount);\n            chain = chain.then(function (results) { return _this.proxy.transfer(sequence).then(function (result) { return results.concat([result]); }); });\n        };\n        var this_1 = this;\n        // Split operations into sequences no longer than operation count\n        while (merged.length) {\n            _loop_1();\n        }\n        return chain\n            .then(function (arrays) { return _this.concatTypedArray(arrays); });\n    };\n    /**\n     * Connect to target device\n     * @returns Promise\n     */\n    ADI.prototype.connect = function () {\n        var _this = this;\n        var mask = 536870912 /* CDBGPWRUPACK */ | -2147483648 /* CSYSPWRUPACK */;\n        return this.proxy.connect()\n            .then(function () { return _this.readDP(0 /* DPIDR */); })\n            .then(function () { return _this.transferSequence([\n            _this.writeDPCommand(0 /* ABORT */, 4 /* STKERRCLR */),\n            _this.writeDPCommand(8 /* SELECT */, 0 /* CSW */),\n            _this.writeDPCommand(4 /* CTRL_STAT */, 1073741824 /* CSYSPWRUPREQ */ | 268435456 /* CDBGPWRUPREQ */)\n        ]); })\n            // Wait until system and debug have powered up\n            .then(function () { return _this.waitDelay(function () {\n            return _this.readDP(4 /* CTRL_STAT */)\n                .then(function (status) { return ((status & mask) === mask); });\n        }); });\n    };\n    /**\n     * Disconnect from target device\n     * @returns Promise\n     */\n    ADI.prototype.disconnect = function () {\n        return this.proxy.disconnect();\n    };\n    /**\n     * Reconnect to target device\n     * @returns Promise\n     */\n    ADI.prototype.reconnect = function () {\n        var _this = this;\n        return this.disconnect()\n            .then(function () { return _this.delay(100); })\n            .then(function () { return _this.connect(); });\n    };\n    /**\n     * Reset target device\n     * @returns Promise\n     */\n    ADI.prototype.reset = function () {\n        return this.proxy.reset();\n    };\n    /**\n     * Read from a debug port register\n     * @param register DP register to read\n     * @returns Promise of register value\n     */\n    ADI.prototype.readDP = function (register) {\n        return this.proxy.transfer(this.readDPCommand(register))\n            .then(function (result) { return result[0]; });\n    };\n    /**\n     * Write to a debug port register\n     * @param register DP register to write\n     * @param value Value to write\n     * @returns Promise\n     */\n    ADI.prototype.writeDP = function (register, value) {\n        return this.proxy.transfer(this.writeDPCommand(register, value))\n            .then(function () { return undefined; });\n    };\n    /**\n     * Read from an access port register\n     * @param register AP register to read\n     * @returns Promise of register value\n     */\n    ADI.prototype.readAP = function (register) {\n        return this.proxy.transfer(this.readAPCommand(register))\n            .then(function (result) { return result[0]; });\n    };\n    /**\n     * Write to an access port register\n     * @param register AP register to write\n     * @param value Value to write\n     * @returns Promise\n     */\n    ADI.prototype.writeAP = function (register, value) {\n        return this.proxy.transfer(this.writeAPCommand(register, value))\n            .then(function () { return undefined; });\n    };\n    /**\n     * Read a 16-bit word from a memory access port register\n     * @param register ID of register to read\n     * @returns Promise of register data\n     */\n    ADI.prototype.readMem16 = function (register) {\n        return this.proxy.transfer(this.readMem16Command(register))\n            .then(function (result) { return result[0]; });\n    };\n    /**\n     * Write a 16-bit word to a memory access port register\n     * @param register ID of register to write to\n     * @param value The value to write\n     * @returns Promise\n     */\n    ADI.prototype.writeMem16 = function (register, value) {\n        value = value << ((register & 0x02) << 3);\n        return this.proxy.transfer(this.writeMem16Command(register, value))\n            .then(function () { return undefined; });\n    };\n    /**\n     * Read a 32-bit word from a memory access port register\n     * @param register ID of register to read\n     * @returns Promise of register data\n     */\n    ADI.prototype.readMem32 = function (register) {\n        return this.proxy.transfer(this.readMem32Command(register))\n            .then(function (result) { return result[0]; });\n    };\n    /**\n     * Write a 32-bit word to a memory access port register\n     * @param register ID of register to write to\n     * @param value The value to write\n     * @returns Promise\n     */\n    ADI.prototype.writeMem32 = function (register, value) {\n        return this.proxy.transfer(this.writeMem32Command(register, value))\n            .then(function () { return undefined; });\n    };\n    /**\n     * Read a block of 32-bit words from a memory access port register\n     * @param register ID of register to read from\n     * @param count The count of values to read\n     * @returns Promise of register data\n     */\n    ADI.prototype.readBlock = function (register, count) {\n        var _this = this;\n        var chain = this.transferSequence([\n            this.writeAPCommand(0 /* CSW */, 587202640 /* VALUE */ | 2 /* SIZE_32 */),\n            this.writeAPCommand(4 /* TAR */, register),\n        ])\n            .then(function () { return []; });\n        // Split into requests no longer than block size\n        var remainder = count;\n        var _loop_2 = function () {\n            var chunkSize = Math.min(remainder, this_2.proxy.blockSize);\n            chain = chain.then(function (results) { return _this.proxy.transferBlock(1 /* ACCESS */, 12 /* DRW */, chunkSize)\n                .then(function (result) { return results.concat([result]); }); });\n            remainder -= chunkSize;\n        };\n        var this_2 = this;\n        while (remainder > 0) {\n            _loop_2();\n        }\n        return chain\n            .then(function (arrays) { return _this.concatTypedArray(arrays); });\n    };\n    /**\n     * Write a block of 32-bit words to a memory access port register\n     * @param register ID of register to write to\n     * @param values The values to write\n     * @returns Promise\n     */\n    ADI.prototype.writeBlock = function (register, values) {\n        var _this = this;\n        var chain = this.transferSequence([\n            this.writeAPCommand(0 /* CSW */, 587202640 /* VALUE */ | 2 /* SIZE_32 */),\n            this.writeAPCommand(4 /* TAR */, register),\n        ])\n            .then(function () { return undefined; });\n        // Split values into chunks no longer than block size\n        var index = 0;\n        var _loop_3 = function () {\n            var chunk = values.slice(index, index + this_3.proxy.blockSize);\n            chain = chain.then(function () { return _this.proxy.transferBlock(1 /* ACCESS */, 12 /* DRW */, chunk); });\n            index += this_3.proxy.blockSize;\n        };\n        var this_3 = this;\n        while (index < values.length) {\n            _loop_3();\n        }\n        return chain;\n    };\n    return ADI;\n}());\nexports.ADI = ADI;\n\n\n\n},{\"../proxy\":7,\"../proxy/cmsis-dap\":6}],2:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar adi_1 = require(\"./adi\");\nexports.ADI = adi_1.ADI;\n\n\n\n},{\"./adi\":1}],3:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar proxy_1 = require(\"../proxy\");\n/**\n * @hidden\n */\nvar DEFAULT_BAUDRATE = 9600;\n/**\n * @hidden\n */\nvar DEFAULT_SERIAL_DELAY = 200;\n/**\n * @hidden\n */\nvar DEFAULT_PAGE_SIZE = 62;\n/**\n * DAPLink Class\n */\nvar DAPLink = /** @class */ (function (_super) {\n    __extends(DAPLink, _super);\n    function DAPLink() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Detect if buffer contains text or binary data\n     */\n    DAPLink.prototype.isBufferBinary = function (buffer) {\n        var numberArray = Array.prototype.slice.call(new Uint16Array(buffer, 0, 50));\n        var bufferString = String.fromCharCode.apply(null, numberArray);\n        for (var i = 0; i < bufferString.length; i++) {\n            var charCode = bufferString.charCodeAt(i);\n            // 65533 is a code for unknown character\n            // 0-8 are codes for control characters\n            if (charCode === 65533 || charCode <= 8) {\n                return true;\n            }\n        }\n        return false;\n    };\n    DAPLink.prototype.writeBuffer = function (buffer, pageSize, offset) {\n        var _this = this;\n        if (offset === void 0) { offset = 0; }\n        var end = Math.min(buffer.byteLength, offset + pageSize);\n        var page = buffer.slice(offset, end);\n        var data = new Uint8Array(page.byteLength + 1);\n        data.set([page.byteLength]);\n        data.set(new Uint8Array(page), 1);\n        return this.send(140 /* WRITE */, data)\n            .then(function () {\n            _this.emit(DAPLink.EVENT_PROGRESS, offset / buffer.byteLength);\n            if (end < buffer.byteLength) {\n                return _this.writeBuffer(buffer, pageSize, end);\n            }\n            return Promise.resolve();\n        });\n    };\n    /**\n     * Flash the target\n     * @param buffer The image to flash\n     * @param pageSize The page size to use (defaults to 62)\n     * @returns Promise\n     */\n    DAPLink.prototype.flash = function (buffer, pageSize) {\n        var _this = this;\n        if (pageSize === void 0) { pageSize = DEFAULT_PAGE_SIZE; }\n        function isView(source) {\n            return source.buffer !== undefined;\n        }\n        var arrayBuffer = isView(buffer) ? buffer.buffer : buffer;\n        var streamType = this.isBufferBinary(arrayBuffer) ? 0 : 1;\n        return this.send(138 /* OPEN */, new Uint32Array([streamType]))\n            .then(function (result) {\n            // An error occurred\n            if (result.getUint8(1) !== 0)\n                return Promise.reject(\"Flash error\");\n            return _this.writeBuffer(arrayBuffer, pageSize);\n        })\n            .then(function () {\n            _this.emit(DAPLink.EVENT_PROGRESS, 1.0);\n            return _this.send(139 /* CLOSE */);\n        })\n            .then(function (result) {\n            // An error occurred\n            if (result.getUint8(1) !== 0)\n                return Promise.reject(\"Flash error\");\n            return _this.send(137 /* RESET */);\n        })\n            .then(function () { return undefined; });\n    };\n    /**\n     * Get the serial baud rate setting\n     * @returns Promise of baud rate\n     */\n    DAPLink.prototype.getSerialBaudrate = function () {\n        return this.send(129 /* READ_SETTINGS */)\n            .then(function (result) {\n            return result.getUint32(1, true);\n        });\n    };\n    /**\n     * Set the serial baud rate setting\n     * @param baudrate The baudrate to use (defaults to 9600)\n     * @returns Promise\n     */\n    DAPLink.prototype.setSerialBaudrate = function (baudrate) {\n        if (baudrate === void 0) { baudrate = DEFAULT_BAUDRATE; }\n        return this.send(130 /* WRITE_SETTINGS */, new Uint32Array([baudrate]))\n            .then(function () { return undefined; });\n    };\n    /**\n     * Start listening for serial data\n     * @param serialDelay The serial delay to use (defaults to 200)\n     */\n    DAPLink.prototype.startSerialRead = function (serialDelay) {\n        var _this = this;\n        if (serialDelay === void 0) { serialDelay = DEFAULT_SERIAL_DELAY; }\n        this.stopSerialRead();\n        this.timer = setInterval(function () {\n            return _this.send(131 /* READ */)\n                .then(function (serialData) {\n                if (serialData.byteLength > 0) {\n                    // check if there is any data returned from the device\n                    // first byte contains the vendor code\n                    // second byte contains the actual length of data read from the device\n                    var dataLength = serialData.getUint8(1);\n                    if (dataLength !== 0) {\n                        var offset = 2;\n                        var dataArray = serialData.buffer.slice(offset, offset + dataLength);\n                        var numberArray = Array.prototype.slice.call(new Uint8Array(dataArray));\n                        var data = String.fromCharCode.apply(null, numberArray);\n                        _this.emit(DAPLink.EVENT_SERIAL_DATA, data);\n                    }\n                }\n            });\n        }, serialDelay);\n    };\n    /**\n     * Stop listening for serial data\n     */\n    DAPLink.prototype.stopSerialRead = function () {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = undefined;\n        }\n    };\n    /**\n     * Write serial data\n     * @param data The data to write\n     * @returns Promise\n     */\n    DAPLink.prototype.serialWrite = function (data) {\n        var arrayData = data.split(\"\").map(function (e) { return e.charCodeAt(0); });\n        arrayData.unshift(arrayData.length);\n        return this.send(132 /* WRITE */, new Uint8Array(arrayData).buffer)\n            .then(function () { return undefined; });\n    };\n    /**\n     * Progress event\n     * @event\n     */\n    DAPLink.EVENT_PROGRESS = \"progress\";\n    /**\n     * Serial read event\n     * @event\n     */\n    DAPLink.EVENT_SERIAL_DATA = \"serial\";\n    return DAPLink;\n}(proxy_1.CmsisDAP));\nexports.DAPLink = DAPLink;\n\n\n\n},{\"../proxy\":7}],4:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar dap_1 = require(\"../dap\");\n/**\n * @hidden\n */\nvar EXECUTE_TIMEOUT = 10000;\n/**\n * @hidden\n */\nvar BKPT_INSTRUCTION = 0xBE2A;\n/**\n * @hidden\n */\nvar GENERAL_REGISTER_COUNT = 12;\n/**\n * Cortex M class\n */\nvar CortexM = /** @class */ (function (_super) {\n    __extends(CortexM, _super);\n    function CortexM() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CortexM.prototype.enableDebug = function () {\n        return this.writeMem32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */);\n    };\n    CortexM.prototype.readCoreRegisterCommand = function (register) {\n        return this.writeMem32Command(3758157300 /* DCRSR */, register)\n            .concat(this.readMem32Command(3758157296 /* DHCSR */))\n            .concat(this.readMem32Command(3758157304 /* DCRDR */));\n    };\n    CortexM.prototype.writeCoreRegisterCommand = function (register, value) {\n        return this.writeMem32Command(3758157304 /* DCRDR */, value)\n            .concat(this.writeMem32Command(3758157300 /* DCRSR */, register | 65536 /* REGWnR */));\n    };\n    /**\n     * Get the state of the processor core\n     * @returns Promise of CoreState\n     */\n    CortexM.prototype.getState = function () {\n        var _this = this;\n        return this.readMem32(3758157296 /* DHCSR */)\n            .then(function (dhcsr) {\n            var state;\n            if (dhcsr & 524288 /* S_LOCKUP */)\n                state = 1 /* LOCKUP */;\n            else if (dhcsr & 262144 /* S_SLEEP */)\n                state = 2 /* SLEEPING */;\n            else if (dhcsr & 131072 /* S_HALT */)\n                state = 3 /* DEBUG */;\n            else\n                state = 4 /* RUNNING */;\n            if (dhcsr & 33554432 /* S_RESET_ST */) {\n                // The core has been reset, check if an instruction has run\n                return _this.readMem32(3758157296 /* DHCSR */)\n                    .then(function (newDhcsr) {\n                    if (newDhcsr & 33554432 /* S_RESET_ST */ && !(newDhcsr & 16777216 /* S_RETIRE_ST */)) {\n                        return 0 /* RESET */;\n                    }\n                    else {\n                        return state;\n                    }\n                });\n            }\n            else {\n                return state;\n            }\n        });\n    };\n    /**\n     * Whether the target is halted\n     * @returns Promise of halted state\n     */\n    CortexM.prototype.isHalted = function () {\n        return this.readMem32(3758157296 /* DHCSR */)\n            .then(function (dhcsr) {\n            return !!(dhcsr & 131072 /* S_HALT */);\n        });\n    };\n    /**\n     * Halt the target\n     * @param wait Wait until halted before returning\n     * @param timeout Milliseconds to wait before aborting wait\n     * @returns Promise\n     */\n    CortexM.prototype.halt = function (wait, timeout) {\n        var _this = this;\n        if (wait === void 0) { wait = true; }\n        if (timeout === void 0) { timeout = 0; }\n        return this.isHalted()\n            .then(function (halted) {\n            if (halted)\n                return Promise.resolve();\n            return _this.writeMem32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */ | 2 /* C_HALT */)\n                .then(function () {\n                if (!wait)\n                    return Promise.resolve();\n                return _this.waitDelay(function () { return _this.isHalted(); }, 100, timeout);\n            });\n        });\n    };\n    /**\n     * Resume a target\n     * @param wait Wait until resumed before returning\n     * @param timeout Milliseconds to wait before aborting wait\n     * @returns Promise\n     */\n    CortexM.prototype.resume = function (wait, timeout) {\n        var _this = this;\n        if (wait === void 0) { wait = true; }\n        if (timeout === void 0) { timeout = 0; }\n        return this.isHalted()\n            .then(function (halted) {\n            if (!halted)\n                return Promise.resolve();\n            return _this.writeMem32(3758157104 /* DFSR */, 4 /* DWTTRAP */ | 2 /* BKPT */ | 1 /* HALTED */)\n                .then(function () { return _this.enableDebug(); })\n                .then(function () {\n                if (!wait)\n                    return Promise.resolve();\n                return _this.waitDelay(function () { return _this.isHalted().then(function (result) { return !result; }); }, 100, timeout);\n            });\n        });\n    };\n    /**\n     * Read from a core register\n     * @param register The register to read\n     * @returns Promise of value\n     */\n    CortexM.prototype.readCoreRegister = function (register) {\n        var _this = this;\n        return this.transferSequence([\n            this.writeMem32Command(3758157300 /* DCRSR */, register),\n            this.readMem32Command(3758157296 /* DHCSR */)\n        ])\n            .then(function (results) {\n            var dhcsr = results[0];\n            if (!(dhcsr & 65536 /* S_REGRDY */)) {\n                throw new Error(\"Register not ready\");\n            }\n            return _this.readMem32(3758157304 /* DCRDR */);\n        });\n    };\n    /**\n     * Read an array of core registers\n     * @param registers The registers to read\n     * @returns Promise of register values in an array\n     */\n    CortexM.prototype.readCoreRegisters = function (registers) {\n        var _this = this;\n        var chain = Promise.resolve([]);\n        registers.forEach(function (register) {\n            chain = chain.then(function (results) { return _this.readCoreRegister(register).then(function (result) { return results.concat([result]); }); });\n        });\n        return chain;\n    };\n    /**\n     * Write to a core register\n     * @param register The register to write to\n     * @param value The value to write\n     * @returns Promise\n     */\n    CortexM.prototype.writeCoreRegister = function (register, value) {\n        return this.transferSequence([\n            this.writeMem32Command(3758157304 /* DCRDR */, value),\n            this.writeMem32Command(3758157300 /* DCRSR */, register | 65536 /* REGWnR */),\n            this.readMem32Command(3758157296 /* DHCSR */)\n        ])\n            .then(function (results) {\n            var dhcsr = results[0];\n            if (!(dhcsr & 65536 /* S_REGRDY */)) {\n                throw new Error(\"Register not ready\");\n            }\n        });\n    };\n    /**\n     * Exucute code at a specified memory address\n     * @param address The address to put the code\n     * @param code The code to use\n     * @param stackPointer The stack pointer to use\n     * @param programCounter The program counter to use\n     * @param linkRegister The link register to use (defaults to address + 1)\n     * @param registers Values to add to the general purpose registers, R0, R1, R2, etc.\n     */\n    CortexM.prototype.execute = function (address, code, stackPointer, programCounter, linkRegister) {\n        var _this = this;\n        if (linkRegister === void 0) { linkRegister = address + 1; }\n        var registers = [];\n        for (var _i = 5; _i < arguments.length; _i++) {\n            registers[_i - 5] = arguments[_i];\n        }\n        // Ensure a breakpoint exists at the end of the code\n        if (code[code.length - 1] !== BKPT_INSTRUCTION) {\n            var newCode = new Uint32Array(code.length + 1);\n            newCode.set(code);\n            newCode.set([BKPT_INSTRUCTION], code.length - 1);\n            code = newCode;\n        }\n        // Create sequence of core register writes\n        var sequence = [\n            this.writeCoreRegisterCommand(13 /* SP */, stackPointer),\n            this.writeCoreRegisterCommand(15 /* PC */, programCounter),\n            this.writeCoreRegisterCommand(14 /* LR */, linkRegister)\n        ];\n        // Add in register values R0, R1, R2, etc.\n        for (var i = 0; i < Math.min(registers.length, GENERAL_REGISTER_COUNT); i++) {\n            sequence.push(this.writeCoreRegisterCommand(i, registers[i]));\n        }\n        return this.halt() // Halt the target\n            .then(function () { return _this.transferSequence(sequence); }) // Write the registers\n            .then(function () { return _this.writeBlock(address, code); }) // Write the code to the address\n            .then(function () { return _this.resume(false); }) // Resume the target, without waiting\n            .then(function () { return _this.waitDelay(function () { return _this.isHalted(); }, 100, EXECUTE_TIMEOUT); }); // Wait for the target to halt on the breakpoint\n    };\n    return CortexM;\n}(dap_1.ADI));\nexports.CortexM = CortexM;\n\n\n\n},{\"../dap\":2}],5:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cortex_m_1 = require(\"./cortex-m\");\nexports.CortexM = cortex_m_1.CortexM;\n\n\n\n},{\"./cortex-m\":4}],6:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"events\");\n/**\n * @hidden\n */\nexports.DEFAULT_CLOCK_FREQUENCY = 10000000;\n/**\n * @hidden\n */\nvar SWD_SEQUENCE = 0xE79E;\n/**\n * @hidden\n */\nvar JTAG_SEQUENCE = 0xE73C;\n/**\n * @hidden\n */\nvar BLOCK_HEADER_SIZE = 4;\n/**\n * @hidden\n */\nvar TRANSFER_HEADER_SIZE = 2;\n/**\n * @hidden\n */\nvar TRANSFER_OPERATION_SIZE = 5;\n/**\n * CMSIS-DAP class\n * https://www.keil.com/pack/doc/CMSIS/DAP/html/group__DAP__Commands__gr.html\n */\nvar CmsisDAP = /** @class */ (function (_super) {\n    __extends(CmsisDAP, _super);\n    /**\n     * CMSIS-DAP constructor\n     * @param transport Debug transport to use\n     * @param mode Debug mode to use\n     * @param clockFrequency Communication clock frequency to use (default 10000000)\n     */\n    function CmsisDAP(transport, mode, clockFrequency) {\n        if (mode === void 0) { mode = 0 /* DEFAULT */; }\n        if (clockFrequency === void 0) { clockFrequency = exports.DEFAULT_CLOCK_FREQUENCY; }\n        var _this = _super.call(this) || this;\n        _this.transport = transport;\n        _this.mode = mode;\n        _this.clockFrequency = clockFrequency;\n        // Determine the block size\n        _this.blockSize = _this.transport.packetSize - BLOCK_HEADER_SIZE - 1; // -1 for the DAP_TRANSFER_BLOCK command\n        // Determine the operation count possible\n        var operationSpace = _this.transport.packetSize - TRANSFER_HEADER_SIZE - 1; // -1 for the DAP_TRANSFER command\n        _this.operationCount = Math.floor(operationSpace / TRANSFER_OPERATION_SIZE);\n        return _this;\n    }\n    CmsisDAP.prototype.delay = function (timeout) {\n        return new Promise(function (resolve, _reject) {\n            setTimeout(resolve, timeout);\n        });\n    };\n    CmsisDAP.prototype.bufferSourceToUint8Array = function (prefix, data) {\n        if (!data) {\n            return new Uint8Array([prefix]);\n        }\n        function isView(source) {\n            return source.buffer !== undefined;\n        }\n        var arrayBuffer = isView(data) ? data.buffer : data;\n        var result = new Uint8Array(arrayBuffer.byteLength + 1);\n        result.set([prefix]);\n        result.set(new Uint8Array(arrayBuffer), 1);\n        return result;\n    };\n    /**\n     * Switches the CMSIS-DAP unit to use SWD\n     * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0316d/Chdhfbhc.html\n     */\n    CmsisDAP.prototype.selectProtocol = function (protocol) {\n        var _this = this;\n        var sequence = protocol === 2 /* JTAG */ ? JTAG_SEQUENCE : SWD_SEQUENCE;\n        return this.swjSequence(new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])) // Sequence of 1's\n            .then(function () { return _this.swjSequence(new Uint16Array([sequence])); }) // Send protocol sequence\n            .then(function () { return _this.swjSequence(new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])); }) // Sequence of 1's\n            .then(function () { return _this.swjSequence(new Uint8Array([0x00])); });\n    };\n    /**\n     * Send a command\n     * @param command Command to send\n     * @param data Data to use\n     * @returns Promise of DataView\n     */\n    CmsisDAP.prototype.send = function (command, data) {\n        var _this = this;\n        var array = this.bufferSourceToUint8Array(command, data);\n        return this.transport.write(array)\n            .then(function () { return _this.transport.read(); })\n            .then(function (response) {\n            if (response.getUint8(0) !== command) {\n                throw new Error(\"Bad response for \" + command + \" -> \" + response.getUint8(0));\n            }\n            switch (command) {\n                case 3 /* DAP_DISCONNECT */:\n                case 8 /* DAP_WRITE_ABORT */:\n                case 9 /* DAP_DELAY */:\n                case 10 /* DAP_RESET_TARGET */:\n                case 17 /* DAP_SWJ_CLOCK */:\n                case 18 /* DAP_SWJ_SEQUENCE */:\n                case 19 /* DAP_SWD_CONFIGURE */:\n                case 29 /* DAP_SWD_SEQUENCE */:\n                case 23 /* DAP_SWO_TRANSPORT */:\n                case 24 /* DAP_SWO_MODE */:\n                case 26 /* DAP_SWO_CONTROL */:\n                case 21 /* DAP_JTAG_CONFIGURE */:\n                case 22 /* DAP_JTAG_ID_CODE */:\n                case 4 /* DAP_TRANSFER_CONFIGURE */:\n                    if (response.getUint8(1) !== 0 /* DAP_OK */) {\n                        throw new Error(\"Bad status for \" + command + \" -> \" + response.getUint8(1));\n                    }\n            }\n            return response;\n        });\n    };\n    /**\n     * Get DAP information\n     * @param request Type of information to get\n     * @returns Promise of number or string\n     */\n    CmsisDAP.prototype.dapInfo = function (request) {\n        return this.send(0 /* DAP_INFO */, new Uint8Array([request]))\n            .then(function (result) {\n            var length = result.getUint8(1);\n            if (length === 0) {\n                throw new Error(\"DAP Info Failure\");\n            }\n            switch (request) {\n                case 240 /* CAPABILITIES */:\n                case 254 /* PACKET_COUNT */:\n                case 255 /* PACKET_SIZE */:\n                case 253 /* SWO_TRACE_BUFFER_SIZE */:\n                    // Byte\n                    if (length === 1)\n                        return result.getUint8(2);\n                    // Short\n                    if (length === 2)\n                        return result.getUint16(2);\n                    // Word\n                    if (length === 4)\n                        return result.getUint32(2);\n            }\n            var ascii = Array.prototype.slice.call(new Uint8Array(result.buffer, 2, length));\n            return String.fromCharCode.apply(null, ascii);\n        });\n    };\n    /**\n     * Send an SWJ Sequence\n     * https://www.keil.com/pack/doc/CMSIS/DAP/html/group__DAP__SWJ__Sequence.html\n     * @param sequence The sequence to send\n     * @returns Promise\n     */\n    CmsisDAP.prototype.swjSequence = function (sequence) {\n        var bitLength = sequence.byteLength * 8;\n        var data = this.bufferSourceToUint8Array(bitLength, sequence);\n        return this.send(18 /* DAP_SWJ_SEQUENCE */, data)\n            .then(function () { return undefined; });\n    };\n    /**\n     * Configure Transfer\n     * https://www.keil.com/pack/doc/CMSIS/DAP/html/group__DAP__TransferConfigure.html\n     * @param idleCycles Number of extra idle cycles after each transfer\n     * @param waitRetry Number of transfer retries after WAIT response\n     * @param matchRetry Number of retries on reads with Value Match in DAP_Transfer\n     * @returns Promise\n     */\n    CmsisDAP.prototype.configureTransfer = function (idleCycles, waitRetry, matchRetry) {\n        var data = new Uint8Array(5);\n        var view = new DataView(data.buffer);\n        view.setUint8(0, idleCycles);\n        view.setUint16(1, waitRetry, true);\n        view.setUint16(3, matchRetry, true);\n        return this.send(4 /* DAP_TRANSFER_CONFIGURE */, data)\n            .then(function () { return undefined; });\n    };\n    /**\n     * Connect to target device\n     * @returns Promise\n     */\n    CmsisDAP.prototype.connect = function () {\n        var _this = this;\n        return this.transport.open()\n            .then(function () { return _this.send(17 /* DAP_SWJ_CLOCK */, new Uint32Array([_this.clockFrequency])); })\n            .then(function () { return _this.send(2 /* DAP_CONNECT */, new Uint8Array([_this.mode])); })\n            .then(function (result) {\n            if (result.getUint8(1) === 0 /* FAILED */ || _this.mode !== 0 /* DEFAULT */ && result.getUint8(1) !== _this.mode) {\n                throw new Error(\"Mode not enabled.\");\n            }\n        })\n            .then(function () { return _this.configureTransfer(0, 100, 0); })\n            .then(function () { return _this.selectProtocol(1 /* SWD */); });\n    };\n    /**\n     * Disconnect from target device\n     * @returns Promise\n     */\n    CmsisDAP.prototype.disconnect = function () {\n        var _this = this;\n        return this.send(3 /* DAP_DISCONNECT */)\n            .then(function () {\n            return _this.transport.close();\n        });\n    };\n    /**\n     * Reconnect to target device\n     * @returns Promise\n     */\n    CmsisDAP.prototype.reconnect = function () {\n        var _this = this;\n        return this.disconnect()\n            .then(function () { return _this.delay(100); })\n            .then(function () { return _this.connect(); });\n    };\n    /**\n     * Reset target device\n     * @returns Promise of whether a device specific reset sequence is implemented\n     */\n    CmsisDAP.prototype.reset = function () {\n        return this.send(10 /* DAP_RESET_TARGET */)\n            .then(function (response) { return response.getUint8(2) === 1 /* RESET_SEQUENCE */; });\n    };\n    CmsisDAP.prototype.transfer = function (portOrOps, mode, register, value) {\n        if (mode === void 0) { mode = 2 /* READ */; }\n        if (register === void 0) { register = 0; }\n        if (value === void 0) { value = 0; }\n        var operations;\n        if (typeof portOrOps === \"number\") {\n            operations = [{\n                    port: portOrOps,\n                    mode: mode,\n                    register: register,\n                    value: value\n                }];\n        }\n        else {\n            operations = portOrOps;\n        }\n        var data = new Uint8Array(TRANSFER_HEADER_SIZE + (operations.length * TRANSFER_OPERATION_SIZE));\n        var view = new DataView(data.buffer);\n        // DAP Index, ignored for SWD\n        view.setUint8(0, 0);\n        // Transfer count\n        view.setUint8(1, operations.length);\n        operations.forEach(function (operation, index) {\n            var offset = TRANSFER_HEADER_SIZE + (index * TRANSFER_OPERATION_SIZE);\n            // Transfer request\n            view.setUint8(offset, operation.port | operation.mode | operation.register);\n            // Transfer data\n            view.setUint32(offset + 1, operation.value || 0, true);\n        });\n        return this.send(5 /* DAP_TRANSFER */, data)\n            .then(function (result) {\n            // Transfer count\n            if (result.getUint8(1) !== operations.length) {\n                throw new Error(\"Transfer count mismatch\");\n            }\n            // Transfer response\n            var response = result.getUint8(2);\n            if (response === 2 /* WAIT */) {\n                throw new Error(\"Transfer response WAIT\");\n            }\n            if (response === 4 /* FAULT */) {\n                throw new Error(\"Transfer response FAULT\");\n            }\n            if (response === 8 /* PROTOCOL_ERROR */) {\n                throw new Error(\"Transfer response PROTOCOL_ERROR\");\n            }\n            if (response === 16 /* VALUE_MISMATCH */) {\n                throw new Error(\"Transfer response VALUE_MISMATCH\");\n            }\n            if (response === 7 /* NO_ACK */) {\n                throw new Error(\"Transfer response NO_ACK\");\n            }\n            if (typeof portOrOps === \"number\") {\n                return result.getUint32(3, true);\n            }\n            var length = operations.length * 4;\n            return new Uint32Array(result.buffer.slice(3, 3 + length));\n        });\n    };\n    CmsisDAP.prototype.transferBlock = function (port, register, countOrValues) {\n        var operationCount;\n        var mode;\n        var dataSize = BLOCK_HEADER_SIZE;\n        if (typeof countOrValues === \"number\") {\n            operationCount = countOrValues;\n            mode = 2 /* READ */;\n        }\n        else {\n            operationCount = countOrValues.length;\n            mode = 0 /* WRITE */;\n            dataSize += countOrValues.byteLength;\n        }\n        var data = new Uint8Array(dataSize);\n        var view = new DataView(data.buffer);\n        // DAP Index, ignored for SWD\n        view.setUint8(0, 0);\n        // Transfer count\n        view.setUint16(1, operationCount, true);\n        // Transfer request\n        view.setUint8(3, port | mode | register);\n        if (typeof countOrValues !== \"number\") {\n            // Transfer data\n            data.set(countOrValues, BLOCK_HEADER_SIZE);\n        }\n        return this.send(6 /* DAP_TRANSFER_BLOCK */, view)\n            .then(function (result) {\n            // Transfer count\n            if (result.getUint16(1, true) !== operationCount) {\n                throw new Error(\"Transfer count mismatch\");\n            }\n            // Transfer response\n            var response = result.getUint8(3);\n            if (response & 2 /* WAIT */) {\n                throw new Error(\"Transfer response WAIT\");\n            }\n            if (response & 4 /* FAULT */) {\n                throw new Error(\"Transfer response FAULT\");\n            }\n            if (response & 8 /* PROTOCOL_ERROR */) {\n                throw new Error(\"Transfer response PROTOCOL_ERROR\");\n            }\n            if (response & 7 /* NO_ACK */) {\n                throw new Error(\"Transfer response NO_ACK\");\n            }\n            if (typeof countOrValues === \"number\") {\n                return new Uint32Array(result.buffer.slice(4));\n            }\n            return undefined;\n        });\n    };\n    return CmsisDAP;\n}(events_1.EventEmitter));\nexports.CmsisDAP = CmsisDAP;\n\n\n\n},{\"events\":10}],7:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cmsis_dap_1 = require(\"./cmsis-dap\");\nexports.CmsisDAP = cmsis_dap_1.CmsisDAP;\n\n\n\n},{\"./cmsis-dap\":6}],8:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @hidden\n */\nvar DEFAULT_CONFIGURATION = 1;\n/**\n * @hidden\n */\nvar DEFAULT_CLASS = 0xFF;\n/**\n * @hidden\n */\nvar GET_REPORT = 0x01;\n/**\n * @hidden\n */\nvar SET_REPORT = 0x09;\n/**\n * @hidden\n */\nvar OUT_REPORT = 0x200;\n/**\n * @hidden\n */\nvar IN_REPORT = 0x100;\n/**\n * WebUSB Transport class\n * https://wicg.github.io/webusb/\n */\nvar WebUSB = /** @class */ (function () {\n    /**\n     * WebUSB constructor\n     * @param device WebUSB device to use\n     * @param interfaceClass Optional interface class to use (default: 0xFF)\n     * @param configuration Optional Configuration to use (default: 1)\n     */\n    function WebUSB(device, interfaceClass, configuration) {\n        if (interfaceClass === void 0) { interfaceClass = DEFAULT_CLASS; }\n        if (configuration === void 0) { configuration = DEFAULT_CONFIGURATION; }\n        this.device = device;\n        this.interfaceClass = interfaceClass;\n        this.configuration = configuration;\n        this.packetSize = 64;\n    }\n    WebUSB.prototype.extendBuffer = function (data, packetSize) {\n        function isView(source) {\n            return source.buffer !== undefined;\n        }\n        var arrayBuffer = isView(data) ? data.buffer : data;\n        var length = Math.min(arrayBuffer.byteLength, packetSize);\n        var result = new Uint8Array(length);\n        result.set(new Uint8Array(arrayBuffer));\n        return result;\n    };\n    /**\n     * Open device\n     * @returns Promise\n     */\n    WebUSB.prototype.open = function () {\n        var _this = this;\n        return this.device.open()\n            .then(function () { return _this.device.selectConfiguration(_this.configuration); })\n            .then(function () {\n            var interfaces = _this.device.configuration.interfaces.filter(function (iface) {\n                return iface.alternates[0].interfaceClass === _this.interfaceClass;\n            });\n            if (!interfaces.length) {\n                throw new Error(\"No valid interfaces found.\");\n            }\n            _this.interfaceNumber = interfaces[0].interfaceNumber;\n            return _this.device.claimInterface(_this.interfaceNumber);\n        });\n    };\n    /**\n     * Close device\n     * @returns Promise\n     */\n    WebUSB.prototype.close = function () {\n        return this.device.close();\n    };\n    /**\n     * Read from device\n     * @returns Promise of DataView\n     */\n    WebUSB.prototype.read = function () {\n        if (!this.interfaceNumber)\n            return Promise.reject(\"No device opened\");\n        return this.device.controlTransferIn({\n            requestType: \"class\",\n            recipient: \"interface\",\n            request: GET_REPORT,\n            value: IN_REPORT,\n            index: this.interfaceNumber\n        }, this.packetSize)\n            .then(function (result) { return result.data; });\n    };\n    /**\n     * Write to device\n     * @param data Data to write\n     * @returns Promise\n     */\n    WebUSB.prototype.write = function (data) {\n        if (!this.interfaceNumber)\n            return Promise.reject(\"No device opened\");\n        var buffer = this.extendBuffer(data, this.packetSize);\n        return this.device.controlTransferOut({\n            requestType: \"class\",\n            recipient: \"interface\",\n            request: SET_REPORT,\n            value: OUT_REPORT,\n            index: this.interfaceNumber\n        }, buffer)\n            .then(function () { return undefined; });\n    };\n    return WebUSB;\n}());\nexports.WebUSB = WebUSB;\n\n\n\n},{}],9:[function(require,module,exports){\n\"use strict\";\n/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar proxy_1 = require(\"./proxy\");\nexports.CmsisDAP = proxy_1.CmsisDAP;\nvar daplink_1 = require(\"./daplink\");\nexports.DAPLink = daplink_1.DAPLink;\nvar dap_1 = require(\"./dap\");\nexports.ADI = dap_1.ADI;\nvar processor_1 = require(\"./processor\");\nexports.CortexM = processor_1.CortexM;\nvar webusb_1 = require(\"./transport/webusb\");\nexports.WebUSB = webusb_1.WebUSB;\n\n\n\n},{\"./dap\":2,\"./daplink\":3,\"./processor\":5,\"./proxy\":7,\"./transport/webusb\":8}],10:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n\n},{}]},{},[9])(9)\n});\n"],"file":"dap.bundle.js","sourceRoot":"../lib"}